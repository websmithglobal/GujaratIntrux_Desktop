using Microsoft.VisualBasic.FileIO;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using ENT = GI.ENTITY;

namespace GI
{
    public partial class Form11 : Form
    {
        System.Timers.Timer objTime = new System.Timers.Timer();
        private const decimal constHexToDec8 = 8388608;
        private const decimal constHexToDec4 = 4194304;
        string line = string.Empty;
        int intFirstBit;
        int intInvert;
        string strNext8Bit;
        decimal dcDecimal;
        decimal dcExponent;
        int tmInerval = 1;
        string conStr;
        SqlConnection conn;

        public Form11()
        {
            InitializeComponent();
            conStr = GI.Properties.Settings.Default.ConnectionString;
            conn = new SqlConnection(conStr);
        }

        private void button1_Click(object sender, EventArgs e)
        {
            try
            {
                objTime = new System.Timers.Timer();
                objTime.Elapsed += new System.Timers.ElapsedEventHandler(ObjTime_Elapsed);
                objTime.Interval = ((1000 * 60) * tmInerval);
                objTime.Enabled = true;
                objTime.AutoReset = true;
                objTime.Start();
                notifyIcon1.BalloonTipText = "File Reading Started.";
                notifyIcon1.ShowBalloonTip(2000);
            }
            catch (Exception ex)
            {
                notifyIcon1.BalloonTipText = "Error : " + ex.Message.ToString();
                notifyIcon1.ShowBalloonTip(2000);
                objTime.Start();
            }
        }

        private void ObjTime_Elapsed(object sender, System.Timers.ElapsedEventArgs e)
        {
            string strFilename = "01SELEC" + DateTime.Now.ToString("yyMMdd") + ".csv";
            try
            {
                objTime.Stop();
                objTime.Enabled = false;
                int cntInsert = 0;
                string copyToFilePath = Path.Combine(Application.StartupPath, strFilename);
                string[] copyFromFilePath = File.ReadAllLines(Path.Combine(Application.StartupPath, "DownloadFilePath.txt"));
                tmInerval = Convert.ToInt32(copyFromFilePath[1]);
                objTime.Interval = ((1000 * 60) * tmInerval);

                #region Copy File From FTP Folder
                if (File.Exists(copyToFilePath))
                {
                    if (File.Exists(Path.Combine(copyFromFilePath[0], strFilename)))
                    {
                        File.Delete(copyToFilePath);
                        File.Copy(Path.Combine(copyFromFilePath[0], strFilename), copyToFilePath);
                    }
                    else
                    {
                        notifyIcon1.BalloonTipText = "File not generated by machine, Please check machine status.";
                        notifyIcon1.ShowBalloonTip(2000);
                        objTime.Start();
                    }                    
                }
                else
                {
                    if (File.Exists(Path.Combine(copyFromFilePath[0], strFilename)))
                    {
                        File.Copy(Path.Combine(copyFromFilePath[0], strFilename), copyToFilePath);
                    }
                    else
                    {
                        notifyIcon1.BalloonTipText = "File not generated by machine, Please check machine status.";
                        notifyIcon1.ShowBalloonTip(2000);
                        objTime.Start();
                    }
                }
                #endregion

                #region Line Count Of File
                DataTable dtNew = new DataTable();
                if (conn.State == ConnectionState.Closed)
                    conn.Open();
                string strqry = "SELECT COUNT(*) AS Cnt FROM MeterSlaveMaster WHERE FileName='" + strFilename.Trim() + "'";
                SqlCommand cmd = new SqlCommand();
                cmd.CommandText = strqry;
                cmd.CommandType = CommandType.Text;
                cmd.Connection = conn;
                SqlDataAdapter da = new SqlDataAdapter(cmd);
                da.Fill(dtNew);

                if (conn.State == ConnectionState.Open)
                    conn.Close();

                int lines_count = Convert.ToInt32(dtNew.Rows[0][0]);
                #endregion
                
                DataTable dtCSV = DAL.MeterSlaveMaster.GetDataTableFromCSVFile((Path.Combine(Application.StartupPath, strFilename)));

                for (int m = lines_count; m < dtCSV.Rows.Count; m++)
                {
                    try
                    {
                        ENT.MeterSlaveMaster objENT = new ENT.MeterSlaveMaster();

                        objENT.ID = Guid.NewGuid();

                        string date = dtCSV.Rows[m][0].ToString().Substring(0, 8);
                        string[] arrDate = date.Split('-');
                        DateTime dtDate = new DateTime(2000 + Convert.ToInt32(arrDate[0]), Convert.ToInt32(arrDate[1]), Convert.ToInt32(arrDate[2]), 0, 0, 0);
                        objENT.DataDate = dtDate;

                        string time = dtCSV.Rows[m][0].ToString().Substring(9, 8);
                        string[] arrTime = time.Split(':');
                        DateTime dtTime = new DateTime(2000 + Convert.ToInt32(arrDate[0]), Convert.ToInt32(arrDate[1]), Convert.ToInt32(arrDate[2]), Convert.ToInt32(arrTime[0]), Convert.ToInt32(arrTime[1]), Convert.ToInt32(arrTime[2]));
                        objENT.DataTime = dtTime;

                        objENT.MeterID = 0;
                        objENT.SlaveID = 0;
                        objENT.Address = 0;
                        objENT.Quantity = 0;
                        objENT.DataValue = Convert.ToDecimal(Convert.ToString(dtCSV.Rows[m][1]));

                        #region Get Last Unit
                        DataTable dtTop = new DataTable();
                        if (conn.State == ConnectionState.Closed)
                            conn.Open();
                        string strTopOne = "SELECT TOP 1 ISNULL(DataValue,0) as topone FROM MeterSlaveMaster ORDER BY EntryDate DESC, LineCount DESC";
                        SqlCommand cmdtop = new SqlCommand();
                        cmdtop.CommandText = strTopOne;
                        cmdtop.CommandType = CommandType.Text;
                        cmdtop.Connection = conn;
                        SqlDataAdapter daTop = new SqlDataAdapter(cmdtop);
                        daTop.Fill(dtTop);

                        if (conn.State == ConnectionState.Open)
                            conn.Close();
                        if (dtTop.Rows.Count > 0)
                        { objENT.DataValue2 = Convert.ToDecimal(dtTop.Rows[0][0]); }
                        else { objENT.DataValue2 = 0; }
                        
                        #endregion

                        string QueryString = "INSERT INTO MeterSlaveMaster (ID,DataDate,DataTime,MeterID,SlaveID,Address,Quantity,DataValue,DataValue2,FileName,LineCount,EntryDate) values ('" + objENT.ID.ToString() + "','" + objENT.DataDate.ToString("dd/MMM/yyyy") + "','" + objENT.DataTime.ToString("dd/MMM/yyyy hh:mm:ss tt") + "'," + objENT.MeterID + "," + objENT.SlaveID + "," + objENT.Address + "," + objENT.Quantity + "," + objENT.DataValue + "," + objENT.DataValue2 + ",'" + strFilename.Trim() + "'," + m.ToString() + ",getdate())";
                        if (conn.State == ConnectionState.Closed)
                            conn.Open();

                        SqlCommand cmdInsert = new SqlCommand();
                        cmdInsert.CommandText = QueryString;
                        cmdInsert.CommandType = CommandType.Text;
                        cmdInsert.Connection = conn;

                        if (cmdInsert.ExecuteNonQuery() > 0)
                        {
                            cntInsert = cntInsert + 1;
                        }

                        if (conn.State == ConnectionState.Open)
                            conn.Close();
                    }
                    catch (Exception ex)
                    {
                        using (System.IO.StreamWriter file = new System.IO.StreamWriter(Application.StartupPath + "\\ErrorLog.txt", true))
                        {
                            file.WriteLine("Date >> " + DateTime.Now.ToString("dd/MMM/yyyy hh:mm:ss tt") + " >> FILE_NAME >> " + strFilename + " >> " + " >> LINE_NO >> " + cntInsert + " >> " + ex.Message.ToString());
                        }

                        if (conn.State == ConnectionState.Open)
                            conn.Close();
                    }
                }
                objTime.Start();
                objTime.Enabled = true;
            }
            catch (Exception ex)
            {
                using (System.IO.StreamWriter file = new System.IO.StreamWriter(Application.StartupPath + "\\ErrorLog.txt", true))
                {
                    file.WriteLine("Date >> " + DateTime.Now.ToString("dd/MMM/yyyy hh:mm:ss tt") + " >> FILE_NAME >> " + strFilename + " >> " + ex.Message.ToString());
                }

                if (conn.State == ConnectionState.Open)
                    conn.Close();

                notifyIcon1.BalloonTipText = "Error : " + ex.Message.ToString();
                notifyIcon1.ShowBalloonTip(2000);
                objTime.Start();
            }
        }

        private string hex2binary(string hexvalue)
        {
            string binaryval = "";
            string a = "";
            try
            {
                binaryval = Convert.ToString(Convert.ToInt32(hexvalue, 16), 2);
                for (int i = 0; i < 8 - binaryval.Length; i++)
                {
                    a = a + "0";
                }
            }
            catch (Exception ex)
            {
                notifyIcon1.BalloonTipText = "Error : " + ex.Message.ToString();
                notifyIcon1.ShowBalloonTip(2000);
            }
            return a + binaryval;
        }

        private string[] HexToBinary(string hex)
        {
            //string[] strBinary = new string[hex.Length / 2];
            int lenth = 0;
            if (hex.Length == 1)
            { lenth = 2; hex = "000" + hex; }
            else if (hex.Length == 2)
            { lenth = 2; hex = "00" + hex; }
            else if (hex.Length == 3)
            { lenth = 2; hex = "0" + hex; }
            else if (hex.Length == 4)
            { lenth = hex.Length / 2; }

            string[] strBinary = new string[lenth];
            try
            {
                for (int i = 0; i < strBinary.Length; i++)
                {
                    strBinary[i] = hex2binary(hex.Substring(i * 2, 2));
                }

                if (strBinary.Length == 0)
                { strBinary[0] = "00000000"; strBinary[1] = "00000000"; }

                if (strBinary.Length == 1)
                { strBinary[1] = "00000000"; }
            }
            catch (Exception ex)
            {
                strBinary = new string[2];
                strBinary[0] = "00000000";
                strBinary[1] = "00000000";
                notifyIcon1.BalloonTipText = "Error : " + ex.Message.ToString();
                notifyIcon1.ShowBalloonTip(2000);
            }
            return strBinary;
        }

        private int binaryToDecimal(string num)
        {
            Int64 decimal_val = 0, base_val = 1, rem, binary_val;
            try
            {
                binary_val = Convert.ToInt64(num);

                while (binary_val > 0)
                {
                    rem = binary_val % 10;
                    decimal_val = decimal_val + rem * base_val;
                    binary_val = binary_val / 10;
                    base_val = base_val * 2;
                }
            }
            catch (Exception ex)
            {
                notifyIcon1.BalloonTipText = "Error : " + ex.Message.ToString();
                notifyIcon1.ShowBalloonTip(2000);
            }
            return (int)decimal_val;
        }

        private void button2_Click(object sender, EventArgs e)
        {
            objTime.Stop();
            notifyIcon1.BalloonTipText = "File Reading Is Stoped.";
            notifyIcon1.ShowBalloonTip(2000);
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            notifyIcon1.BalloonTipText = "Data Reading Application Started.";
            notifyIcon1.ShowBalloonTip(2000);
        }

        private void Form1_Resize(object sender, EventArgs e)
        {
            if (this.WindowState == FormWindowState.Minimized)
            {
                Hide();
            }
        }

        private void notifyIcon1_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            Show();
            this.WindowState = FormWindowState.Normal;
        }
        
    }
}
