using Microsoft.VisualBasic.FileIO;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using ENT = GI.ENTITY;

namespace GI
{
    public partial class frmReadFileManual : Form
    {
        // Current used this form for read file from selec1 folder
        System.Timers.Timer objTime = new System.Timers.Timer();
        private const decimal constHexToDec8 = 8388608;
        private const decimal constHexToDec4 = 4194304;
        string line = string.Empty;
        int tmInerval = 1;
        string conStr;
        SqlConnection conn;

        public frmReadFileManual()
        {
            InitializeComponent();
            conStr = GI.Properties.Settings.Default.ConnectionString;
            conn = new SqlConnection(conStr);
        }

        private void button1_Click(object sender, EventArgs e)
        {
            try
            {
                button1.Enabled = false;
                button2.Enabled = true;
                ReadData();
                //objTime = new System.Timers.Timer();
                //objTime.Elapsed += new System.Timers.ElapsedEventHandler(ObjTime_Elapsed);
                //objTime.Interval = ((1000 * 60) * tmInerval);
                //objTime.Enabled = true;
                //objTime.AutoReset = true;
                //objTime.Start();
                //notifyIcon1.BalloonTipText = "File Reading Started.";
                //notifyIcon1.ShowBalloonTip(2000);
               
            }
            catch (Exception ex)
            {
                using (System.IO.StreamWriter file = new System.IO.StreamWriter(Application.StartupPath + "\\ErrorLog.txt", true))
                {
                    file.WriteLine("Date >> " + DateTime.Now.ToString("dd/MMM/yyyy hh:mm:ss tt") + " >> ERROR >> " + ex.Message);
                }
                notifyIcon1.BalloonTipText = "Error : " + ex.Message.ToString();
                notifyIcon1.ShowBalloonTip(2000);
                objTime.Start();
            }
        }

        private void ObjTime_Elapsed(object sender, System.Timers.ElapsedEventArgs e)
        {
            //ReadData();
        }

        private void ReadData()
        {
            //string strFilename = "01SELEC" + DateTime.Now.ToString("yyMMdd") + ".csv";
            if (string.IsNullOrWhiteSpace(txtFileName.Text.Trim()))
            {
                MessageBox.Show("Please enter valid file name.","Manual Read", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                button1.Enabled = true;
                button2.Enabled = false;
                return;
            }
            if (!txtFileName.Text.Contains("01SELEC"))
            {
                MessageBox.Show("This file is not selec1 file.", "Manual Read", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                button1.Enabled = true;
                button2.Enabled = false;
                return;
            }

            string strFilename = txtFileName.Text.Trim() + ".csv";
            try
            {
                notifyIcon1.BalloonTipText = "File Reading Started.";
                notifyIcon1.ShowBalloonTip(2000);

                int cntInsert = 0;
                string copyToFilePath = Path.Combine(Application.StartupPath, strFilename);
                string[] copyFromFilePath = File.ReadAllLines(Path.Combine(Application.StartupPath, "DownloadFilePath.txt"));
                tmInerval = Convert.ToInt32(copyFromFilePath[1]);
                objTime.Interval = ((1000 * 60) * tmInerval);

                #region Copy File From FTP Folder
                if (File.Exists(copyToFilePath))
                {
                    if (File.Exists(Path.Combine(copyFromFilePath[0], strFilename)))
                    {
                        File.Delete(copyToFilePath);
                        File.Copy(Path.Combine(copyFromFilePath[0], strFilename), copyToFilePath);
                    }
                    else
                    {
                        notifyIcon1.BalloonTipText = "File not generated by machine, Please check machine status.";
                        notifyIcon1.ShowBalloonTip(2000);
                        objTime.Start();
                    }
                }
                else
                {
                    if (File.Exists(Path.Combine(copyFromFilePath[0], strFilename)))
                    {
                        File.Copy(Path.Combine(copyFromFilePath[0], strFilename), copyToFilePath);
                    }
                    else
                    {
                        notifyIcon1.BalloonTipText = "File not generated by machine, Please check machine status.";
                        notifyIcon1.ShowBalloonTip(2000);
                        objTime.Start();
                    }
                }
                #endregion

                #region Line Count Of File
                DataTable dtNew = new DataTable();
                if (conn.State == ConnectionState.Closed)
                    conn.Open();
                string strqry = "SELECT COUNT(*) AS Cnt FROM MeterSlaveMaster WHERE FileName='" + strFilename.Trim() + "'";
                SqlCommand cmd = new SqlCommand();
                cmd.CommandText = strqry;
                cmd.CommandType = CommandType.Text;
                cmd.Connection = conn;
                SqlDataAdapter da = new SqlDataAdapter(cmd);
                da.Fill(dtNew);

                if (conn.State == ConnectionState.Open)
                    conn.Close();

                int lines_count = Convert.ToInt32(dtNew.Rows[0][0]);
                #endregion
               
                DataTable dtCSV = DAL.MeterSlaveMaster.GetDataTableFromCSVFile((Path.Combine(Application.StartupPath, strFilename)));
                for (int m = lines_count; m < dtCSV.Rows.Count; m++)
                {
                    try
                    {
                        ENT.MeterSlaveMaster objENT = new ENT.MeterSlaveMaster();

                        objENT.ID = Guid.NewGuid();

                        string date = dtCSV.Rows[m][0].ToString().Substring(0, 8);
                        string[] arrDate = date.Split('-');
                        DateTime dtDate = new DateTime(2000 + Convert.ToInt32(arrDate[0]), Convert.ToInt32(arrDate[1]), Convert.ToInt32(arrDate[2]), 0, 0, 0);
                        objENT.DataDate = dtDate;

                        string time = dtCSV.Rows[m][0].ToString().Substring(9, 8);
                        string[] arrTime = time.Split(':');
                        DateTime dtTime = new DateTime(2000 + Convert.ToInt32(arrDate[0]), Convert.ToInt32(arrDate[1]), Convert.ToInt32(arrDate[2]), Convert.ToInt32(arrTime[0]), Convert.ToInt32(arrTime[1]), Convert.ToInt32(arrTime[2]));
                        objENT.DataTime = dtTime;

                        objENT.MeterID = 0;
                        objENT.SlaveID = 0;
                        objENT.Address = 0;
                        objENT.Quantity = 0;
                        objENT.DataValue = Convert.ToDecimal(Convert.ToString(dtCSV.Rows[m][1]));

                        string strValues = Convert.ToString(dtCSV.Rows[m][2]);
                        strValues = strValues.Replace("[", "").Replace("]", "");
                        string[] Values = strValues.Split(',');
                        objENT.Value1 = Convert.ToDecimal(Values[0]);
                        objENT.Value2 = Convert.ToDecimal(Values[1]);

                        #region Get Last Unit
                        DataTable dtTop = new DataTable();
                        if (conn.State == ConnectionState.Closed)
                            conn.Open();
                        string strTopOne = "SELECT TOP 1 ISNULL(DataValue,0) as DataValue,Value2,FinalUnit FROM MeterSlaveMaster ORDER BY EntryDate DESC, LineCount DESC";
                        SqlCommand cmdtop = new SqlCommand();
                        cmdtop.CommandText = strTopOne;
                        cmdtop.CommandType = CommandType.Text;
                        cmdtop.Connection = conn;
                        SqlDataAdapter daTop = new SqlDataAdapter(cmdtop);
                        daTop.Fill(dtTop);
                        decimal dcmPrvValue2 = 0;
                        if (conn.State == ConnectionState.Open)
                            conn.Close();
                        if (dtTop.Rows.Count > 0)
                        {
                            objENT.DataValue2 = Convert.ToDecimal(dtTop.Rows[0]["DataValue"]);
                            objENT.FinalUnit = Convert.ToDecimal(dtTop.Rows[0]["FinalUnit"]);
                            dcmPrvValue2 = Convert.ToDecimal(dtTop.Rows[0]["Value2"]);
                            using (System.IO.StreamWriter file = new System.IO.StreamWriter(Application.StartupPath + "\\LastUnitLog-" + DateTime.Now.ToString("dd-MM-yyyy") + ".txt", true))
                            {
                                file.WriteLine("Date >> " + DateTime.Now.ToString("dd/MMM/yyyy hh:mm:ss tt") + " >> DataValue Found >> " + objENT.DataValue2 + " >> " + " >> LINE_NO >> " + cntInsert);
                            }
                        }
                        else
                        {
                            objENT.DataValue2 = 0; objENT.FinalUnit = 0;
                            using (System.IO.StreamWriter file = new System.IO.StreamWriter(Application.StartupPath + "\\LastUnitLog-" + DateTime.Now.ToString("dd-MM-yyyy") + ".txt", true))
                            {
                                file.WriteLine("Date >> " + DateTime.Now.ToString("dd/MMM/yyyy hh:mm:ss tt") + " >> DataValue Not Found>> " + objENT.DataValue2 + " >> " + " >> LINE_NO >> " + cntInsert);
                            }
                        }
                        

                        decimal dcmDiff = objENT.Value2 - dcmPrvValue2;

                        dcmDiff = dcmDiff / 64;

                        if (dcmDiff < 0)
                        {
                            dcmDiff = dcmDiff + 1024;
                        }

                        objENT.Difference = dcmDiff;
                        objENT.FinalUnit = objENT.FinalUnit + dcmDiff;

                        #endregion

                        string QueryString = "INSERT INTO MeterSlaveMaster (ID,DataDate,DataTime,MeterID,SlaveID,Address,Quantity,DataValue,DataValue2,Difference,FinalUnit,Value1,Value2,FileName,LineCount,EntryDate) values ('" + objENT.ID.ToString() + "','" + objENT.DataDate.ToString("dd/MMM/yyyy") + "','" + objENT.DataTime.ToString("dd/MMM/yyyy hh:mm:ss tt") + "'," + objENT.MeterID + "," + objENT.SlaveID + "," + objENT.Address + "," + objENT.Quantity + "," + objENT.DataValue + "," + objENT.DataValue2 + "," + objENT.Difference + "," + objENT.FinalUnit + "," + objENT.Value1 + "," + objENT.Value2 + ",'" + strFilename.Trim() + "'," + (m + 1).ToString() + ",'" + objENT.DataDate.ToString("dd/MMM/yyyy") + " " + DateTime.Now.ToString("HH:mm:ss") + "')";
                        if (conn.State == ConnectionState.Closed)
                            conn.Open();

                        SqlCommand cmdInsert = new SqlCommand();
                        cmdInsert.CommandText = QueryString;
                        cmdInsert.CommandType = CommandType.Text;
                        cmdInsert.Connection = conn;

                        if (cmdInsert.ExecuteNonQuery() > 0)
                        {
                            cntInsert = cntInsert + 1;
                        }

                        if (conn.State == ConnectionState.Open)
                            conn.Close();
                    }
                    catch (Exception ex)
                    {
                        using (System.IO.StreamWriter file = new System.IO.StreamWriter(Application.StartupPath + "\\ErrorLog.txt", true))
                        {
                            file.WriteLine("Date >> " + DateTime.Now.ToString("dd/MMM/yyyy hh:mm:ss tt") + " >> FILE_NAME >> " + strFilename + " >> " + " >> LINE_NO >> " + cntInsert + " >> " + ex.Message.ToString());
                        }

                        if (conn.State == ConnectionState.Open)
                            conn.Close();
                    }
                }
                button1.Enabled = true;
                button2.Enabled = false;
                //objTime.Start();
                //objTime.Enabled = true;
            }
            catch (Exception ex)
            {
                using (System.IO.StreamWriter file = new System.IO.StreamWriter(Application.StartupPath + "\\ErrorLog.txt", true))
                {
                    file.WriteLine("Date >> " + DateTime.Now.ToString("dd/MMM/yyyy hh:mm:ss tt") + " >> FILE_NAME >> " + strFilename + " >> " + ex.Message.ToString());
                }

                if (conn.State == ConnectionState.Open)
                    conn.Close();

                notifyIcon1.BalloonTipText = "Error : " + ex.Message.ToString();
                notifyIcon1.ShowBalloonTip(2000);
                //objTime.Start();
            }
        }

        private void button2_Click(object sender, EventArgs e)
        {
            objTime.Stop();
            notifyIcon1.BalloonTipText = "File Reading Is Stoped.";
            notifyIcon1.ShowBalloonTip(2000);
            button1.Enabled = true;
            button2.Enabled = false;
        }

        private void frmReadFile_Load(object sender, EventArgs e)
        {
            try
            {
                button1.Enabled = true;
                button2.Enabled = false;
                notifyIcon1.BalloonTipText = "Data Reading Application Started.";
                notifyIcon1.ShowBalloonTip(2000);
                //button1_Click(button1, new EventArgs());
            }
            catch (Exception ex)
            {
                using (System.IO.StreamWriter file = new System.IO.StreamWriter(Application.StartupPath + "\\ErrorLog.txt", true))
                {
                    file.WriteLine("Date >> " + DateTime.Now.ToString("dd/MMM/yyyy hh:mm:ss tt") + " >> ERROR >> " + ex.Message);
                }
            }
        }

        private void frmReadFile_Resize(object sender, EventArgs e)
        {
            if (this.WindowState == FormWindowState.Minimized)
            {
                Hide();
            }
        }

        private void frmReadFile_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            Show();
            this.WindowState = FormWindowState.Normal;
        }
    }
}
